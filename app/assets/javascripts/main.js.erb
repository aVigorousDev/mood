window.addEventListener('load', () => {
  if (!('serviceWorker' in navigator)) return console.log('serviceWorker not supported');
  if (!('PushManager' in window)) return console.log('PushManager not supported');

  askPermission();
  registerServiceWorker((push_subscription) => {
    console.log('PushSubscription created.');

    const payload = {
      subscription: push_subscription,
      max_actions: Notification.maxActions,
    };

    // send to API for storage
    fetch('/push_subscriptions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload),
    })
    .then((response) => {
      if (response.ok)
        console.log('PushSubscription stored.');
      else
        console.log('PushSubscription not stored.');
    })
    .catch(error => console.error(error));
  });
});

function askPermission() {
  return new Promise((resolve, reject) => {
    const permission_result = Notification.requestPermission(result => resolve(result));

    console.log('Max actions: ', Notification.maxActions);

    if (permission_result) permission_result.then(resolve, reject);
  })
  .then((permission_result) => {
    if (permission_result === 'granted')
      console.log('Permission granted.');
    else
      console.error('Permission not granted.');
  })
  .catch((error) => {
    console.error(error);
  });
}

function registerServiceWorker(callback) {
  return navigator
    .serviceWorker
    .register(window.service_worker_path)
    .then((registration) => {
      console.log('Service worker registered.');

      const subscribeOptions = {
        userVisibleOnly: true,
        applicationServerKey: urlBase64ToUint8Array(
          window.vapid_public_key
        ),
      };

      return registration.pushManager.subscribe(subscribeOptions);
    })
    .then((push_subscription) => {
      callback(push_subscription);
    })
    .catch((error) => {
      console.error(error);
    });
}

// from https://github.com/GoogleChromeLabs/web-push-codelab/blob/master/app/scripts/main.js
function urlBase64ToUint8Array(base64String) {
  const padding = '='.repeat((4 - base64String.length % 4) % 4);
  const base64 = (base64String + padding)
    .replace(/\-/g, '+')
    .replace(/_/g, '/');

  const rawData = window.atob(base64);
  const outputArray = new Uint8Array(rawData.length);

  for (let i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i);
  }
  return outputArray;
}

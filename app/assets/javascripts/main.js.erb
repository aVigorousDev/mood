const DEVICE_DESCRIPTION_KEY = 'device_description';

window.addEventListener('load', () => {
  if (!('serviceWorker' in navigator)) return console.log('service_worker: not_supported');
  if (!('Notification' in window)) return console.log('notification: not_supported');
  if (!('PushManager' in window)) return console.log('subscription: not_supported');

  console.log('notification/permission:', Notification.permission);

  if (Notification.permission == 'granted') {
    registerServiceWorker((registration) => {
      createSubscription(registration, (subscription) => {
        persistSubscription(subscription);
      });
    });
  }

  let enableNotificationsButton = document.getElementById('enable-notifications');

  if (enableNotificationsButton) {
    enableNotificationsButton.addEventListener('click', ()  => {
      if (Notification.permission == 'denied') {
        alert('It appears notifications are currently disabled for this site on your device. If you would like to enable notifications, you will need to fix this in your browser settings.');
      }
      else {
        askPermission(() => {
          registerServiceWorker((registration) => {
            createSubscription(registration, (subscription) => {
              persistSubscription(subscription);
            });
          });
        });
      }
    });
  }
});

function askPermission(callback) {
  return new Promise((resolve, reject) => {
    const permission_result = Notification.requestPermission(result => resolve(result));

    console.log('notification/actions: ', Notification.maxActions);

    if (permission_result) permission_result.then(resolve, reject);
  })
  .then((permission_result) => {
    if (permission_result === 'granted') {
      console.log('notification: granted');

      callback();
    }
    else {
      console.log('notification: not_granted');
    }
  })
  .catch((error) => {
    console.error(error);
  });
}

function createSubscription(registration, callback) {
  let service_worker = getServiceWorker(registration);

  const subscribeOptions = {
    userVisibleOnly: true,
    applicationServerKey: urlBase64ToUint8Array(
      window.vapid_public_key
    ),
  };

  if (service_worker) {
    console.log('service_worker:', service_worker.state);

    // if it's already activated when we get here, go ahead and create the subscription
    if (service_worker.state == 'activated') {
      registration.pushManager.subscribe(subscribeOptions).then((subscription) => {
        console.log('subscription: created');

        callback(subscription);
      });
    }

    // add statechange listener
    service_worker.addEventListener('statechange', (e) => {
      console.log('service_worker:', e.target.state);

      // if we get an activated state, the subscription still needs created
      if (e.target.state == 'activated') {
        registration.pushManager.subscribe(subscribeOptions).then((subscription) => {
          console.log('subscription: created');

          callback(subscription);
        });
      }
    });
  }
}

function fetchDeviceDescription() {
  const element = document.getElementById('device-description');

  if (!!element && !!element.value) {
    localStorage.setItem(DEVICE_DESCRIPTION_KEY, element.value);

    return element.value;
  }

  return localStorage.getItem(DEVICE_DESCRIPTION_KEY);
}

function getServiceWorker(registration) {
  return registration.installing || registration.waiting || registration.active;
}

function persistSubscription(subscription) {
  let payload = {
    description: fetchDeviceDescription(),
    max_actions: Notification.maxActions,
    subscription: subscription,
    user_agent: navigator.userAgent,
  };

  // send to API for storage
  fetch('/api/subscriptions', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(payload),
  })
  .then((response) => {
    if (response.ok)
      console.log('subscription: persisted');
    else
      console.log('subscription: not_persisted');
  })
  .catch(error => console.error(error));
}

function registerServiceWorker(callback) {
  return navigator
    .serviceWorker
    .register(window.service_worker_path)
    .then((registration) => {
      console.log('service_worker: registered');

      callback(registration);
    })
    .catch((error) => {
      console.error(error);
    });
}

// from https://github.com/GoogleChromeLabs/web-push-codelab/blob/master/app/scripts/main.js
function urlBase64ToUint8Array(base64String) {
  const padding = '='.repeat((4 - base64String.length % 4) % 4);
  const base64 = (base64String + padding)
    .replace(/\-/g, '+')
    .replace(/_/g, '/');

  const rawData = window.atob(base64);
  const outputArray = new Uint8Array(rawData.length);

  for (let i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i);
  }
  return outputArray;
}

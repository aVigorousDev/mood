<script src="https://cdn.jsdelivr.net/npm/invert-color@2.0.0/lib/invert.min.js" integrity="sha256-QhVaUgMYkNbBK03hBrIs+sHaQyk8eIFmvRamkk97TiE=" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js" integrity="sha256-4iQZ6BVL4qNKlQ27TExEhBN1HFPvAvAMbFavKKosSWQ=" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js" integrity="sha256-R4pqcOYV8lt7snxMQO/HSbVCFRPMdrhAFMH+vr9giYI=" crossorigin="anonymous"></script>

<canvas id="entries-graph"></canvas>
<input id="notification-responses" type="hidden" value="<%= entries.to_json %>">

<% entries.reverse.each do |entry| %>

<div class="card mood-entry">
  <div class="card-body">
    <p class="card-text labels-container">
      <span class="labels">
        <% Array(entry.data['choices']).sort.each do |mood| %>

        <span class="label" data-mood="<%= mood %>"><%= mood %></span>

        <% end %>
      </span>
      <a href="<%= edit_entry_path(entry) %>">
        <svg class="bi bi-pencil icon" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
          <path fill-rule="evenodd" d="M11.293 1.293a1 1 0 011.414 0l2 2a1 1 0 010 1.414l-9 9a1 1 0 01-.39.242l-3 1a1 1 0 01-1.266-1.265l1-3a1 1 0 01.242-.391l9-9zM12 2l2 2-9 9-3 1 1-3 9-9z" clip-rule="evenodd"/>
          <path fill-rule="evenodd" d="M12.146 6.354l-2.5-2.5.708-.708 2.5 2.5-.707.708zM3 10v.5a.5.5 0 00.5.5H4v.5a.5.5 0 00.5.5H5v.5a.5.5 0 00.5.5H6v-1.5a.5.5 0 00-.5-.5H5v-.5a.5.5 0 00-.5-.5H3z" clip-rule="evenodd"/>
        </svg>
      </a>
    </p>
    <p class="card-text"><%= entry.notes %></p>
    <p class="card-text smaller-text">Created on <%= entry.created_at.strftime('%a, %-d %b %Y at %-I:%M %p') %></p>
  </div>
</div>

<% end %>

<script>
  const entries = JSON.parse(document.getElementById('notification-responses').value);

  function* color_generator() {
    let index = 0;

    while (true) {
      yield index++;
    }
  }

  // https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion
  // http://en.wikipedia.org/wiki/HSL_color_space
  function hslToRgb(h, s, l) {
    var r, g, b;

    if (s == 0) {
      // achromatic
      r = g = b = l;
    }
    else {
      const hue2rgb = function(p, q, t) {
        if (t < 0) t += 1;
        if (t > 1) t -= 1;
        if (t < 1 / 6) return p + (q - p) * 6 * t;
        if (t < 1 / 2) return q;
        if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;

        return p;
      }

      let q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      let p = 2 * l - q;

      r = hue2rgb(p, q, h + 1 / 3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1 / 3);
    }

    return {
      r: Math.round(r * 255),
      g: Math.round(g * 255),
      b: Math.round(b * 255),
    };
  }

  // https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion
  // http://en.wikipedia.org/wiki/HSL_color_space
  function rgbToHsl(r, g, b) {
    r /= 255, g /= 255, b /= 255;

    let max = Math.max(r, g, b), min = Math.min(r, g, b);
    let h, s, l = (max + min) / 2;

    if (max == min) {
      // achromatic
      h = s = 0;
    } else {
      let d = max - min;

      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);

      switch(max) {
        case r: h = (g - b) / d + (g < b ? 6 : 0); break;
        case g: h = (b - r) / d + 2; break;
        case b: h = (r - g) / d + 4; break;
      }

      h /= 6;
    }

    return {
      h: h,
      s: s,
      l: l,
    };
  }

  function hslToCss(h, s, l, a = 1.0) {
    return `hsla(${h}, ${Math.round(s * 100)}%, ${Math.round(l * 100)}%, ${a})`;
  }

  function rgbToCss(r, g, b, a = 1.0) {
    return `rgba(${r}, ${g}, ${b}, ${a})`;
  }

  const next_colors = color_generator();

  function get_color() {
    // return `hsla(${Math.floor(360 * Math.random())}, 90%, 80%, 0.8)`;
    let h = next_colors.next().value * 3 * 10;
    let s = 1;
    let l = 0.8;

    return {
      h: h,
      s: s,
      l: l,
    };
  }

  function get_moods() {
    let all_moods = [];

    for (let entry of entries) {
      let moods = entry.data.choices || [];

      for (let mood of moods) {
        if (!all_moods.includes(mood)) {
          all_moods.push(mood);
        }
      }
    }

    return all_moods;
  }

  function colors() {
    return get_moods().reduce((map, mood) => {
      // map[mood] = get_color();
      let { h, s, l } = get_color();
      let bg_rgb = hslToRgb((h / 360), s, l);
      let { r, g, b } = invert.asRGB({
        r: bg_rgb.r,
        g: bg_rgb.g,
        b: bg_rgb.b,
      }, true);
      let background_color = hslToCss(h, s, l, 0.8);
      let color = rgbToCss(r, g, b, 1);

      map[mood] = {
        background_color: background_color,
        color: color,
      };

      return map;
    }, {});
  }

  var color_map = colors();

  document.querySelectorAll('.mood-entry .label[data-mood]').forEach((el) => {
    let mood = el.dataset.mood;

    el.style.backgroundColor = color_map[mood].background_color;
    el.style.color = color_map[mood].color;
  });


  function get_dates() {
    let start = moment(entries[0].created_at).startOf('day');
    let end = moment(entries[entries.length - 1].created_at).startOf('day');
    let now = start;
    let dates = [];

    while(now.isSameOrBefore(end)) {
      dates.push(now.clone());
      now.add(1, 'days');
    }

    return dates;
  }

  const dates = get_dates();
  const moods = get_moods();

  function make_datasets() {
    let datasets = [];

    for (let mood of moods) {
      datasets.push(make_dataset(mood));
    }

    return datasets;
  }

  function make_dataset(mood) {
    let color = color_map[mood];

    return {
      barPercentage: 1,
      backgroundColor: color.background_color,
      data: make_data(mood),
      hoverBackgroundColor: color.background_color,
      label: mood,
    };
  }

  function make_data(mood) {
    let data = [];

    for (let date of dates) {
      data.push({
        t: date,
        y: 0,
      });
    }

    for (let entry of entries) {
      let response_moods = entry.data.choices || [];
      let created_at = moment(entry.created_at).startOf('day');

      if (response_moods.includes(mood)) {
        let found = data.find(entry => entry.t.isSame(created_at));

        found.y++;
      }
    }

    return data;
  }

  const datasets = make_datasets();

  var context = document.getElementById('entries-graph').getContext('2d');
  var chart = new Chart(context, {
    type: 'bar',
    data: {
      datasets: datasets,
    },
    options: {
      scales: {
        xAxes: [{
          offset: true,
          stacked: true,
          type: 'time',
          time: {
            stepSize: 1,
            unit: 'day',
          },
        }],
        yAxes: [{
          stacked: true,
          ticks: {
            beginAtZero: true,
            precision: 0,
          }
        }]
      }
    }
  });
</script>
